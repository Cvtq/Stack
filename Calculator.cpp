#include <string.h>
#include "stack.h"
#include "Calculator.h"

//Метод возвращает true, если проверяемый символ - разделитель ("пробел" или "равно")
bool Calculator::IsDelimeter(char c)
{   
    if (string(" =").find(c) != std::string::npos)
        return true;
    return false;
}

//Метод возвращает true, если проверяемый символ - оператор
bool Calculator::IsOperator(char c)
{    
    if (string("+-/*^()").find(c) != std::string::npos)
        return true;
    return false;
}

//Метод возвращает приоритет оператора
size_t Calculator::GetPriority(char s)
{
    switch (s)
    {
    case '(': return 0;
    case ')': return 1;
    case '+': return 2;
    case '-': return 3;
    case '*': return 4;
    case '/': return 4;
    case '^': return 5;
    default: return 6;
    }
}

//"Входной" метод класса
double Calculator::Calculate(string input)
{
    //string output = GetExpression(input); //Преобразовываем выражение в постфиксную запись
    //double result = Counting(output); //Решаем полученное выражение
    double result = Counting(input); //Решаем полученное выражение
    return result; //Возвращаем результат
}

string Calculator::GetExpression(string input)
{
    string output("");     //Строка для хранения выражения
    Stack<char> operStack; //Стек для хранения операторов

    for (int i = 0; i < input.size(); i++) //Для каждого символа в входной строке
    {
        //Разделители пропускаем
        if (IsDelimeter(input[i]))
            continue; //Переходим к следующему символу

       //Если символ - цифра, то считываем все число
        if (isdigit(input[i])) //Если цифра
        {
            //Читаем до разделителя или оператора, что бы получить число
            while (!IsDelimeter(input[i]) && !IsOperator(input[i]))
            {
                output += input[i]; //Добавляем каждую цифру числа к нашей строке
                i++; //Переходим к следующему символу

                if (i == input.size()) break; //Если символ - последний, то выходим из цикла
            }

            output += " "; //Дописываем после числа пробел в строку с выражением
            i--; //Возвращаемся на один символ назад, к символу перед разделителем
        }

        //Если символ - оператор
        if (IsOperator(input[i])) //Если оператор
        {
            if (input[i] == '(') //Если символ - открывающая скобка
                operStack.Push(input[i]); //Записываем её в стек
            else if (input[i] == ')') //Если символ - закрывающая скобка
            {
                //Выписываем все операторы до открывающей скобки в строку
                char s = operStack.Pop();

                while (s != '(')
                {
                    std::string str; 
                    str.push_back(s);
                    output += str + ' ';
                    s = operStack.Pop();
                }
            }
            else //Если любой другой оператор
            {
                if (operStack.size() > 0) //Если в стеке есть элементы
                    if (GetPriority(input[i]) <= GetPriority(operStack.Peek())) { //И если приоритет нашего оператора меньше или равен приоритету оператора на вершине стека
                        string str;
                        str.push_back(operStack.Pop());
                        output += str + " "; //То добавляем последний оператор из стека в строку с выражением
                    }
                operStack.Push(input[i]); //Если стек пуст, или же приоритет оператора выше - добавляем операторов на вершину стека

            }
        }
    }

    //Когда прошли по всем символам, выкидываем из стека все оставшиеся там операторы в строку
    while (operStack.size() > 0)
        output += operStack.Pop() + " ";

    return output; //Возвращаем выражение в постфиксной записи
}

double Calculator::Counting(string input)
{
    double result = 0; //Результат
    Stack<double> temp; //Dhtvtyysq стек для решения

    for (int i = 0; i < input.size(); i++) //Для каждого символа в строке
    {
        //Если символ - цифра, то читаем все число и записываем на вершину стека
        if (isdigit(input[i]))
        {
            string a("");

            while (!IsDelimeter(input[i]) && !IsOperator(input[i])) //Пока не разделитель
            {
                a += input[i]; //Добавляем
                i++;
                if (i == input.size()) break;
            }
            temp.Push(stod(a)); //Записываем в стек
            i--;
        }
        else if (IsOperator(input[i])) //Если символ - оператор
        {
            //Берем два последних значения из стека
            double a = temp.Pop();
            double b = temp.Pop();

            switch (input[i]) //И производим над ними действие, согласно оператору
            {
            case '+': result = b + a; break;
            case '-': result = b - a; break;
            case '*': result = b * a; break;
            case '/': result = b / a; break;
            case '^': 
                string str_a, str_b;
                str_a.push_back(a);
                str_b.push_back(b);
                result = pow(stod(str_b), stod(str_a)); 
                break;
            }
            temp.Push(result); //Результат вычисления записываем обратно в стек
        }
    }
    return temp.Peek(); //Забираем результат всех вычислений из стека и возвращаем его
}

